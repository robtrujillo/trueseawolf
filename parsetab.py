
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '904F59CE52591ACAB179290D8719B9BF'
    
_lr_action_items = {'LESS_THAN_EQUAL':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[21,-26,-36,-27,-28,-25,21,21,21,-16,-13,-19,21,-10,-9,-11,21,-20,-18,-14,-15,21,-8,-17,-12,21,21,21,21,-24,21,-29,-33,21,21,21,]),'FLOOR_DIV':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[22,-26,-36,-27,-28,-25,22,22,22,22,22,-19,22,22,-9,22,22,-20,-18,22,22,22,-8,22,22,22,22,22,22,-24,22,-29,-33,22,22,22,]),'OPEN_BRACKET':([1,3,4,8,9,10,11,14,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,77,79,80,81,82,83,86,90,91,92,93,],[17,27,-26,-36,17,17,17,-27,-28,17,-25,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-41,-39,17,17,27,27,17,17,-1,17,27,-42,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-37,27,27,-24,17,27,17,17,-29,-33,-40,27,27,17,27,]),'EQUALS':([8,87,],[40,92,]),'PRINT':([1,11,38,39,45,47,48,52,72,77,86,],[6,6,-41,-39,6,6,-1,-42,-37,6,-40,]),'REAL':([1,9,10,11,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,47,48,49,52,72,77,80,81,86,92,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-41,-39,4,4,4,4,-1,4,-42,-37,4,4,4,-40,4,]),'$end':([2,48,],[0,-1,]),'CLOSE_BRACKET':([4,8,14,16,18,42,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,74,75,82,83,90,91,93,],[-26,-36,-27,-28,-25,-23,-32,82,-16,-13,-19,-22,-10,-9,-11,83,-20,-18,-14,-15,-21,-8,-17,-12,-35,87,-24,-29,-33,-30,-31,-34,]),'IF':([1,11,38,39,45,47,48,52,72,77,86,],[5,5,-41,-39,5,5,-1,-42,-37,5,-40,]),'NOT_EQUAL':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[34,-26,-36,-27,-28,-25,34,34,34,-16,-13,-19,34,-10,-9,-11,34,-20,-18,-14,-15,34,-8,-17,-12,34,34,34,34,-24,34,-29,-33,34,34,34,]),'EXPONENT':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[28,-26,-36,-27,-28,-25,28,28,28,28,28,28,28,28,-9,28,28,-20,-18,28,28,28,-8,28,28,28,28,28,28,-24,28,-29,-33,28,28,28,]),'ELSE':([38,39,48,],[71,-39,-1,]),'AND':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[32,-26,-36,-27,-28,-25,-23,32,32,-16,-13,-19,32,-10,-9,-11,32,-20,-18,-14,-15,-21,-8,-17,-12,32,32,32,32,-24,32,-29,-33,32,32,32,]),'CLOSE_PARENTHESIS':([4,8,14,16,18,42,43,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,73,75,79,82,83,93,],[-26,-36,-27,-28,-25,-23,75,-16,-13,-19,-22,-10,-9,-11,-20,-18,-14,-15,-21,-8,-17,-12,84,85,-35,-24,89,-29,-33,-34,]),'COMMA':([4,8,14,16,18,42,50,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,73,75,82,83,90,91,93,],[-26,-36,-27,-28,-25,-23,80,81,-16,-13,-19,-22,-10,-9,-11,-20,-18,-14,-15,-21,-8,-17,-12,-35,-24,-29,-33,-30,-31,-34,]),'SEMI':([3,4,8,12,14,16,18,42,46,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,73,75,82,83,85,93,],[-7,-26,-36,47,-27,-28,-25,-23,77,-16,-13,-19,-22,-10,-9,-11,-20,-18,-14,-15,-21,-8,-17,-12,-35,-24,-29,-33,-44,-34,]),'EQUALS_EQUALS':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[20,-26,-36,-27,-28,-25,20,20,20,-16,-13,-19,20,-10,-9,-11,20,-20,-18,-14,-15,20,-8,-17,-12,20,20,20,20,-24,20,-29,-33,20,20,20,]),'OPEN_PARENTHESIS':([1,5,6,9,10,11,15,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,47,48,49,52,72,77,80,81,86,92,],[10,36,37,10,10,10,49,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-41,-39,10,10,10,10,-1,10,-42,-37,10,10,10,-40,10,]),'NAME':([1,9,10,11,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,47,48,49,52,72,77,80,81,86,92,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-41,-39,8,8,8,8,-1,8,-42,-37,8,8,8,-40,8,]),'OPEN_CURLY':([0,7,19,71,84,89,],[1,1,1,1,-38,-43,]),'PLUS':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[24,-26,-36,-27,-28,-25,24,24,24,24,24,-19,24,-10,-9,-11,24,-20,-18,24,24,24,-8,24,24,24,24,24,24,-24,24,-29,-33,24,24,24,]),'MULT':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[25,-26,-36,-27,-28,-25,25,25,25,25,25,25,25,25,-9,25,25,25,25,25,25,25,-8,25,25,25,25,25,25,-24,25,-29,-33,25,25,25,]),'MINUS':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[26,-26,-36,-27,-28,-25,26,26,26,26,26,-19,26,-10,-9,-11,26,-20,-18,26,26,26,-8,26,26,26,26,26,26,-24,26,-29,-33,26,26,26,]),'OR':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[23,-26,-36,-27,-28,-25,-23,23,23,-16,-13,-19,-22,-10,-9,-11,23,-20,-18,-14,-15,-21,-8,-17,-12,23,23,23,23,-24,23,-29,-33,23,23,23,]),'STRING':([1,9,10,11,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,47,48,49,52,72,77,80,81,86,92,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-41,-39,14,14,14,14,-1,14,-42,-37,14,14,14,-40,14,]),'MOD':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[29,-26,-36,-27,-28,-25,29,29,29,29,29,29,29,29,-9,29,29,29,-18,29,29,29,-8,29,29,29,29,29,29,-24,29,-29,-33,29,29,29,]),'GREATER_THAN':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[30,-26,-36,-27,-28,-25,30,30,30,-16,-13,-19,30,-10,-9,-11,30,-20,-18,-14,-15,30,-8,-17,-12,30,30,30,30,-24,30,-29,-33,30,30,30,]),'GREATER_THAN_EQUAL':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[31,-26,-36,-27,-28,-25,31,31,31,-16,-13,-19,31,-10,-9,-11,31,-20,-18,-14,-15,31,-8,-17,-12,31,31,31,31,-24,31,-29,-33,31,31,31,]),'WHILE':([1,11,38,39,45,47,48,52,72,77,86,],[15,15,-41,-39,15,15,-1,-42,-37,15,-40,]),'INT':([1,9,10,11,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,47,48,49,52,72,77,80,81,86,92,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-41,-39,18,18,18,18,-1,18,-42,-37,18,18,18,-40,18,]),'DIVIDE':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[33,-26,-36,-27,-28,-25,33,33,33,33,33,33,33,33,-9,33,33,33,33,33,33,33,-8,33,33,33,33,33,33,-24,33,-29,-33,33,33,33,]),'NOT':([1,9,10,11,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,47,48,49,52,72,77,80,81,86,92,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-41,-39,9,9,9,9,-1,9,-42,-37,9,9,9,-40,9,]),'LESS_THAN':([3,4,8,14,16,18,42,43,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,79,82,83,90,91,93,],[35,-26,-36,-27,-28,-25,35,35,35,-16,-13,-19,35,-10,-9,-11,35,-20,-18,-14,-15,35,-8,-17,-12,35,35,35,35,-24,35,-29,-33,35,35,35,]),'CLOSE_CURLY':([11,13,38,39,44,45,47,48,52,72,76,77,78,86,88,],[-6,48,-41,-39,-4,-6,-6,-1,-42,-37,-5,-6,-2,-40,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'thenBlock':([7,],[38,]),'expression':([1,9,10,11,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,40,41,45,47,49,77,80,81,92,],[3,42,43,3,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,3,3,79,3,90,91,93,]),'elseBlock':([38,],[72,]),'special':([1,11,45,47,77,],[11,45,45,45,45,]),'inner':([17,],[51,]),'statement':([1,11,45,47,77,],[12,46,46,46,46,]),'block':([0,7,19,71,],[2,39,52,86,]),'condition':([1,11,45,47,77,],[7,7,7,7,7,]),'statement_list':([1,],[13,]),'while_condition':([1,11,45,47,77,],[19,19,19,19,19,]),'list':([1,9,10,11,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,40,41,45,47,49,77,80,81,92,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'statement_tail':([11,45,47,77,],[44,76,78,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> OPEN_CURLY statement_list CLOSE_CURLY','block',3,'p_statement_block','trueSeawolf.py',368),
  ('statement_list -> statement SEMI statement_tail','statement_list',3,'p_statement_list','trueSeawolf.py',373),
  ('statement_tail -> statement SEMI statement_tail','statement_tail',3,'p_statement_tail','trueSeawolf.py',378),
  ('statement_list -> special statement_tail','statement_list',2,'p_special_list','trueSeawolf.py',384),
  ('statement_tail -> special statement_tail','statement_tail',2,'p_special_tail','trueSeawolf.py',390),
  ('statement_tail -> <empty>','statement_tail',0,'p_statement_list_empty','trueSeawolf.py',395),
  ('statement -> expression','statement',1,'p_statement','trueSeawolf.py',400),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','trueSeawolf.py',406),
  ('expression -> expression MULT expression','expression',3,'p_expression','trueSeawolf.py',407),
  ('expression -> expression PLUS expression','expression',3,'p_expression','trueSeawolf.py',408),
  ('expression -> expression MINUS expression','expression',3,'p_expression','trueSeawolf.py',409),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','trueSeawolf.py',410),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','trueSeawolf.py',411),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','trueSeawolf.py',412),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','trueSeawolf.py',413),
  ('expression -> expression EQUALS_EQUALS expression','expression',3,'p_expression','trueSeawolf.py',414),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','trueSeawolf.py',415),
  ('expression -> expression MOD expression','expression',3,'p_expression','trueSeawolf.py',416),
  ('expression -> expression FLOOR_DIV expression','expression',3,'p_expression','trueSeawolf.py',417),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression','trueSeawolf.py',418),
  ('expression -> expression AND expression','expression',3,'p_expression','trueSeawolf.py',419),
  ('expression -> expression OR expression','expression',3,'p_expression','trueSeawolf.py',420),
  ('expression -> NOT expression','expression',2,'p_expression_not','trueSeawolf.py',427),
  ('expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','expression',3,'p_expression_parenthesis','trueSeawolf.py',433),
  ('expression -> INT','expression',1,'p_expression_int','trueSeawolf.py',439),
  ('expression -> REAL','expression',1,'p_expression_real','trueSeawolf.py',447),
  ('expression -> STRING','expression',1,'p_expression_string','trueSeawolf.py',455),
  ('expression -> list','expression',1,'p_expression_list','trueSeawolf.py',463),
  ('list -> OPEN_BRACKET inner CLOSE_BRACKET','list',3,'p_expression_list_def','trueSeawolf.py',470),
  ('inner -> expression COMMA expression','inner',3,'p_expression_inner','trueSeawolf.py',476),
  ('inner -> inner COMMA expression','inner',3,'p_expression_inner2','trueSeawolf.py',482),
  ('inner -> expression','inner',1,'p_inner','trueSeawolf.py',488),
  ('expression -> expression OPEN_BRACKET expression CLOSE_BRACKET','expression',4,'p_expression_index','trueSeawolf.py',494),
  ('expression -> NAME OPEN_BRACKET expression CLOSE_BRACKET EQUALS expression','expression',6,'p_var_index','trueSeawolf.py',501),
  ('expression -> NAME EQUALS expression','expression',3,'p_var_assign','trueSeawolf.py',508),
  ('expression -> NAME','expression',1,'p_expression_var','trueSeawolf.py',514),
  ('special -> condition thenBlock elseBlock','special',3,'p_expression_if','trueSeawolf.py',520),
  ('condition -> IF OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','condition',4,'p_condition','trueSeawolf.py',527),
  ('thenBlock -> block','thenBlock',1,'p_thenBlock','trueSeawolf.py',533),
  ('elseBlock -> ELSE block','elseBlock',2,'p_elseBlock1','trueSeawolf.py',539),
  ('elseBlock -> <empty>','elseBlock',0,'p_elseBlock2','trueSeawolf.py',545),
  ('special -> while_condition block','special',2,'p_while','trueSeawolf.py',551),
  ('while_condition -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','while_condition',4,'p_while_condition','trueSeawolf.py',557),
  ('statement -> PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','statement',4,'p_print','trueSeawolf.py',563),
  ('empty -> <empty>','empty',0,'p_empty','trueSeawolf.py',573),
]
